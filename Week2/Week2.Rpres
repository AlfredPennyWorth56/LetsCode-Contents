<style>
.small-code pre code {
  font-size: 1em;
}
</style>

Let's Code - Week 2
========================================================
author: Adrien ROUX
date: January, 2017
autosize: true

Any feedback on last Week
========================================================
class: small-code

1. Missing installs: R, Rstudio, Git...
1. Questions: did you try some of the material discussed in Week 1 ?
1. Open issues: regarding assignement 1 ?


Control Strutures
========================================================
class: small-code

Control structures in R allow you to control the flow of execution of a series of R expressions. 

Basically, they allow you to put some **logic** into your R code, rather than just always executing the same R code every time. 

They allow you to respond to inputs or to features of the data and execute different R expressions accordingly.

**Example 1:** If (user = "Adrien") 
**Then** do this...
**Else** do that...

**Example 2:** **Repeat** doing this **until** a specific condition is met, (e.g. a user presses the keyboard).


Commonly used control structures
========================================================
class: small-code

Commonly used control structures are:
* **if** and **else**: testing a condition and acting on it
* **for**: execute a loop a *fixed* number of times
* **while**: execute a loop, while a *condition* is true
* **repeat**: execute an *infinite* loop (must break out of it to stop)
* **break**: break the execution of a loop
* **next**: skip an interation of a loop

You need to get familiar with terms such as **condition**, **loop**, **infinite loop**, which will regularly appear.

Control Strutures : If and Else (1/.)
========================================================
class: small-code

The **if-else** combination is probably the most commonly used control structure. It allows you to test a condition and act on it depending on whether it’s true or false.

```{r}
x <- "Hi everyone"
#x <- "Hello Bob"
#x <- 1

if(is.character(x)) {
  # do something...
  x <- gsub("everyone", "all", x, ignore.case = T)
} else if(is.numeric(x)) {
  x <- x + 1
} else {
  # do nothing at all.
}

x
```

The **else** clause is not necessary. You could have a series of if clauses that always get executed if their respective conditions are true.

Control Strutures : For Loops (1/.)
========================================================
class: small-code

**For loops** are pretty much the most common and only looping construct that you will need in R. While you may occasionally find a need for other types of loops, in my experience, I’ve found very few situations where a for loop wasn’t sufficient.

```{r}
x <- c("a", "b", "c", "d")
for(j in 1:4) {
  print(x[j]) 
}
```

In R, for loops take an **iterator variable** (here *j*) and assign it successive values from a sequence (here *1:10*) or an object like a list, vector, etc.

**NB:** *seq_along* is comonly used instead of *1:4* and **For loops** can very well be nested.

Control Strutures : While Loops (1/.)
========================================================
class: small-code

**While loops** begin by testing a **condition**. If it is *true*, then they execute the *loop body*. **Once the loop body is executed, the condition is tested again**, and so forth, until the condition is false, after which the loop exits.

```{r}
count <- 0
while(count < 5) {
  print(count); count <- count + 1
}
```

While loops can result in **infinite** loops if not written properly. **Use with care!**

Sometimes there will be more than one condition in the test. They are always evaluated from left to right.

Control Strutures : Repeat Loops (1/.)
========================================================
class: small-code

**repeat** initiates an **infinite loop** right from the start. These are not commonly used in statistical or data analysis applications but they do have their uses. The only way to exit a repeat loop is to call **break**.

One possible paradigm might be in an iterative algorithm where you may be searching for a solution and you don’t want to stop until you’re close enough to the solution.

```{r}

```


Control Strutures : Next, Break (1/.)
========================================================
class: small-code

**next** is used to skip an iteration of a loop.

```{r}

```

**break** is used to exit a loop immediately, regardless of what iteration the loop may be on.

```{r}

```


Functions (1/.)
========================================================
class: small-code

Writing functions is a core activity of an R programmer. It represents the key step of the transition from a mere *user* to a developer who creates new functionality for R. 

Functions are often used to encapsulate a sequence of expressions that need to be executed numerous times, perhaps under slightly different conditions. Functions are also often written when code must be shared with others or the public.

The writing of a function allows a developer to create an interface to the code, that is explicitly specified with a set of parameters. This interface provides an abstraction of the code to potential users. This abstraction simplifies the users lives because it relieves them from having to know every detail of how the code operates. In addition, the creation of an interface allows the developer to communicate to the user the aspects of the code that are important or are most relevant.

Functions (2/.)
========================================================
class: small-code

STOP TALKING!

**Your First Function:**
Functions are defined using the function() directive and are stored as R objects just like anything else. In particular, they are R objects of class **function**.

Here’s a simple function that takes no arguments and does nothing.
```{r}
f <- function() {
## This is an empty function
}
```

```{r}
## Functions have their own class
class(f)

## Execute function
f()
```

Functions (3/.)
========================================================
class: small-code

Not very interesting, but it’s a start. The next thing we can do is create a function that actually has a non-trivial function body.

```{r}
f <- function() {
  cat("Hello, wOrld!\n")
}
f()
```


